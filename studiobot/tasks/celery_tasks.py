import os
import json
import asyncio

from celery import Celery, shared_task
from celery.schedules import crontab
from sqlalchemy.ext.asyncio import AsyncSession

from aiogram import Bot
from config import config
from database.engine import session_maker
from database.orm_query import orm_create_orders, orm_delete_all_carts
from services.bot_notifier import notify_admin, notify_user
from services.receipt_processor import extract_text, validate_receipt
from services.storage import Storage


bot = Bot(token=config.BOT_TOKEN)


celery = Celery('tasks', broker=config.CELERY_BROKER)
celery.autodiscover_tasks(['tasks'])
celery.conf.update(
    task_serializer='json',
    result_serializer='json',
    task_track_started=True,
    task_ignore_result=True,
    task_always_eager=False,
    broker_connection_retry_on_startup=True,
    beat_schedule={
        'delete-carts-at-midnight': {
            'task': 'tasks.celery_tasks.delete_all_carts',
            'schedule': crontab(minute=0, hour=0),  # –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 00:00
        },
    },
    timezone='Asia/Irkutsk',
)

event_loop = None

def get_or_create_eventloop():

    global event_loop
    if event_loop is None:
        event_loop = asyncio.new_event_loop()
    return event_loop


async def async_create_order(session: AsyncSession, user_id: int):

    try:
        await orm_create_orders(session, user_id)
        return True

    except Exception as e:
        print(str(e))
        return False


async def async_process_receipt(file_path: str, user_id: int, chat_id: int, expected_amount: float, file_id: str):

    try:
        receipt_text = extract_text(file_path)
        validation = validate_receipt(receipt_text, expected_amount)

        async with session_maker() as session:

            if validation['valid']:
                success = await async_create_order(session, user_id)

                if success:
                    await notify_user(
                        chat_id,
                        '‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.'
                    )
                    await notify_admin(
                        file_path=file_path,
                        validation=validation,
                        expected_amount=expected_amount,
                        user_id=user_id,
                        chat_id=chat_id,
                        file_id=file_id,
                    )

                else:
                    await notify_user(
                        chat_id,
                        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n'
                        '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
                    )
                    await notify_admin(
                        user_id=user_id,
                        chat_id=chat_id,
                        message='‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã\n'
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–°—É–º–º–∞: {expected_amount:2f}‚ÇΩ"
                    )

            else:
                verification_id = f"verify_{user_id}_{os.path.basename(file_path)}"
                Storage.save_verification(verification_id, {
                    'user_id': user_id,
                    'chat_id': chat_id,
                    'file_path': file_path,
                    'expected_amount': expected_amount,
                    'validation': json.dumps(validation)
                })
                
                try:
                    await notify_user(
                        chat_id,
                        'üîç –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n\
‚ÄºÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –º–µ–Ω—è–π—Ç–µ —Å–æ—Å—Ç–∞–≤ –∫–æ—Ä–∑–∏–Ω—ã –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚ÄºÔ∏è'
                    )
                    await notify_admin(
                        file_path=file_path,
                        validation=validation,
                        expected_amount=expected_amount,
                        user_id=user_id,
                        chat_id=chat_id,
                        file_id=file_id,
                    )

                except Exception as e:
                    print(str(e))
                    await notify_user(
                        chat_id,
                        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞.\n'
                        '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
                    )
                    await notify_admin(
                        user_id=user_id,
                        chat_id=chat_id,
                        message=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
                    )

    except Exception as e:
        print(str(e))
        await notify_user(
            chat_id,
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞.\n'
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤—è–∑–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
        )
        await notify_admin(
            user_id=user_id,
            chat_id=chat_id,
            message=f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
        )


@celery.task(name='process_receipt')
def process_receipt(file_path: str, expected_amount: float, user_id: int, chat_id: int, file_id: str):

    loop = get_or_create_eventloop()

    if loop.is_closed():
        global event_loop
        event_loop = asyncio.new_event_loop()
        loop = event_loop
        asyncio.set_event_loop(loop)

    if not loop.is_running():
        loop.run_until_complete(
            async_process_receipt(file_path, user_id, chat_id, expected_amount, file_id)
        )
    else:
        asyncio.run_coroutine_threadsafe(
            async_process_receipt(file_path, user_id, chat_id, expected_amount, file_id),
            loop
        )



async def async_del_all_carts():

    async with session_maker() as session:

        users_ids = await orm_delete_all_carts(session)

        for chat_id in users_ids:
            await notify_user(
                chat_id,
                '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–æ–ø–ª–∞—Ç—ã'
            )


@shared_task#(bind=True)
def delete_all_carts():

    loop = get_or_create_eventloop()

    if loop.is_closed():
        global event_loop
        event_loop = asyncio.new_event_loop()
        loop = event_loop
        asyncio.set_event_loop(loop)

    if not loop.is_running():
        loop.run_until_complete(
            async_del_all_carts()
        )
    else:
        asyncio.run_coroutine_threadsafe(
            async_del_all_carts(),
            loop
        )
