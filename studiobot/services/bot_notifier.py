import os
import logging

import asyncio

from aiogram import Bot
from aiogram.filters.callback_data import CallbackData
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config


logger = logging.getLogger(__name__)

bot = Bot(token=config.BOT_TOKEN)

class OrderCallback(CallbackData, prefix='order'):
    verify: str
    user_id: int
    chat_id: int


async def notify_user(chat_id: int, message: str):
    '''–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''

    try:
        mssg = await bot.send_message(chat_id, message)

        await asyncio.sleep(2)
        await bot.delete_message(chat_id=chat_id, message_id=mssg.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {str(e)}")


async def notify_admin(
    file_path: str = None,
    validation: dict = None,
    expected_amount: float = None,
    user_id: int = None,
    chat_id: int = None,
    message: str = None,
    file_id: str = None
):
    '''–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'''

    try:
        if message:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            for admin_id in config.ADMIN_ID:
                await bot.send_message(admin_id, message)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_info = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
            f"üí≥ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {expected_amount:.2f}‚ÇΩ\n"
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n" + 
            "\n".join(validation['details'])
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        for admin_id in config.ADMIN_ID:

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard = InlineKeyboardBuilder()

            keyboard.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    callback_data=OrderCallback(verify='accept', user_id=user_id, chat_id=chat_id))
            if validation['valid']:
                keyboard.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                        callback_data=OrderCallback(verify='delete', user_id=user_id, chat_id=chat_id))
            else:
                keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=OrderCallback(verify='reject', user_id=user_id, chat_id=chat_id))

            if file_path and os.path.exists(file_path):
                if file_path.endswith('.pdf'):
                    msg = await bot.send_document(
                        admin_id,
                        file_id,
                        caption=user_info + '\n\n‚ùóÔ∏è–ü–†–û–í–ï–†–¨–¢–ï –ß–ï–ö –ò –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï‚ùóÔ∏è',
                        reply_markup=keyboard.as_markup()
                    )
                else:
                    msg = await bot.send_photo(
                        admin_id,
                        file_id,
                        caption=user_info + '\n\n‚ùóÔ∏è–ü–†–û–í–ï–†–¨–¢–ï –ß–ï–ö –ò –í–´–ë–ï–†–ò–¢–ï –î–ï–ô–°–¢–í–ò–ï‚ùóÔ∏è',
                        reply_markup=keyboard.as_markup()
                    )
            else:
                msg = await bot.send_message(admin_id, user_info)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
