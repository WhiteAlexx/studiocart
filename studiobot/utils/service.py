import re
from decimal import Decimal, InvalidOperation


async def parse_count(text):

    text_clean = text.strip().lower()

    pattern = r'^\s*([\d,\.]+)\s*(—Å–º|–º)\s*$'
    match = re.match(pattern, text_clean)
    
    if not match:
        return (False, '<b>‚ùó–í–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ‚ùó</b>\n\n\
–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ (–≤ —Å–º –∏–ª–∏ –º, <b><u>–Ω–∞–ø—Ä–∏–º–µ—Ä 65—Å–º –∏–ª–∏ 0,65–º</u></b>):')
    
    num_str, unit = match.group(1), match.group(2)
    
    if unit == '—Å–º':
        try:
            num = int(num_str)
        except ValueError:
            return (False, '<b>‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤‚ùó</b>\n\n\
–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ (–≤ —Å–º –∏–ª–∏ –º, <b><u>–Ω–∞–ø—Ä–∏–º–µ—Ä 65—Å–º –∏–ª–∏ 0,65–º</u></b>):')
        
        value_in_m = Decimal(num) / Decimal(100)

    else:
        num_str_clean = num_str.replace(',', '.')
        try:
            value_in_m = Decimal(num_str_clean)
        except InvalidOperation:
            return (False, f"<b>‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: '{num_str}' –¥–ª—è –º–µ—Ç—Ä–æ–≤‚ùó</b>\n\n\
–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ (–≤ —Å–º –∏–ª–∏ –º, <b><u>–Ω–∞–ø—Ä–∏–º–µ—Ä 65—Å–º –∏–ª–∏ 0,65–º</u></b>):")

    value_in_m = value_in_m.quantize(Decimal('0.00'))

    if value_in_m < Decimal('0.10'):
        return (False, f"<b>‚ùó–ó–Ω–∞—á–µ–Ω–∏–µ {value_in_m} –º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ (0.10 –º)‚ùó</b>")
    
    return (True, value_in_m)


async def get_caption(product):
    
    top_text= ''
    if product.unit == '—à—Ç':
        if product.quantity <= 0:
            top_text = '‚õîÔ∏è  –ó–ê–ö–û–ù–ß–ò–õ–°–Ø   ‚õîÔ∏è\n\n'
        if product.quantity == 1:
            top_text = '‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó\n    –ü–û–°–õ–ï–î–ù–ò–ô\n\n'
        if product.quantity == 2:
            top_text = '‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 2\n\n'

    residual = ''
    if product.unit == '–º':
        if product.quantity <= 0.15:
            top_text = '‚õîÔ∏è  –ó–ê–ö–û–ù–ß–ò–õ–°–Ø   ‚õîÔ∏è\n\n'
        if 0.15 < product.quantity <= 1.2:
            top_text = '‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó\n–ü–û–°–õ–ï–î–ù–ò–ô –û–¢–†–ï–ó\n\n'
            residual = f"<i>‚úÇÔ∏è–û—Ç—Ä–µ–∑ {product.quantity}{product.unit}‚úÇÔ∏è</i>\n\n"
        # if product.quantity == 2:
        #     top_text = '‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó‚ùó\n–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 2\n\n'

    if product.final_price % 1 == 0:
        price_txt = f"üí≥–¶–µ–Ω–∞ {product.final_price:.0f}‚ÇΩ/{product.unit}"
    else:
        price_txt = f"üí≥–¶–µ–Ω–∞ {product.final_price:.2f}‚ÇΩ/{product.unit}"

    if residual:
        price = product.quantity * product.final_price
        if price % 1 == 0:
            price_txt = f"üí≥–¶–µ–Ω–∞ –∑–∞ –æ—Ç—Ä–µ–∑ {price:.0f}‚ÇΩ"
        else:
            price_txt = f"üí≥–¶–µ–Ω–∞ –∑–∞ –æ—Ç—Ä–µ–∑ {price:.2f}‚ÇΩ"

    if product.discount_percent != 0:
        top_text += f"<b><i>üî•üî•üî•–°–ö–ò–î–ö–ê {product.discount_display}üî•üî•üî•</i></b>\n\n"

        if product.final_price % 1 == 0:
            price_txt = f"<i><b>üí≥–¶–µ–Ω–∞ {product.final_price:.0f}‚ÇΩ/{product.unit}</b></i>"
        else:
            price_txt = f"<i><b>üí≥–¶–µ–Ω–∞ {product.final_price:.2f}‚ÇΩ/{product.unit}</b></i>"

        if product.price % 1 == 0:
            price_txt += f" <i>(—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ <s>{product.price:.0f}‚ÇΩ/{product.unit}</s>)</i>"
        else:
            price_txt += f" <i>(—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ <s>{product.price:.2f}‚ÇΩ/{product.unit}</s>)</i>"

        if residual:
            price = product.quantity * product.final_price
            if price % 1 == 0:
                price_txt = f"<i><b>üí≥–¶–µ–Ω–∞ –∑–∞ –æ—Ç—Ä–µ–∑ {price:.0f}‚ÇΩ</b></i>"
            else:
                price_txt = f"<i><b>üí≥–¶–µ–Ω–∞ –∑–∞ –æ—Ç—Ä–µ–∑ {price:.2f}‚ÇΩ</b></i>"

            old_price = product.quantity * product.price
            if old_price % 1 == 0:
                price_txt += f" <i>(—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ <s>{old_price:.0f}‚ÇΩ/{product.unit}</s>)</i>"
            else:
                price_txt += f" <i>(—Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ <s>{old_price:.2f}‚ÇΩ/{product.unit}</s>)</i>"

    caption = f"<b>{top_text}</b><b>{product.name}</b>\n\n{product.description}\n\n\
{residual}{price_txt}"

    if not residual and product.quantity < 999:
        if product.quantity % 1 == 0:
            caption += f"\n\n–í –Ω–∞–ª–∏—á–∏–∏ {product.quantity:.0f}{product.unit}"
        else:
            caption += f"\n\n–í –Ω–∞–ª–∏—á–∏–∏ {product.quantity:.2f}{product.unit}"

    return caption


async def cart_caption(carts, cart):


    cart_price = round(cart.quantity * cart.product.final_price, 2)
    if cart_price % 1 == 0:
        cart_price_txt = f"{cart_price:.0f}"
    else:
        cart_price_txt = f"{cart_price:.2f}"

    total_price = round(sum(cart.quantity * cart.product.final_price for cart in carts), 2)
    if total_price % 1 == 0:
        total_price_txt = f"{total_price:.0f}"
    else:
        total_price_txt = f"{total_price:.2f}"

    if cart.product.final_price % 1 == 0:
        final_price_txt = f"{cart.product.final_price:.0f}"
    else:
        final_price_txt = f"{cart.product.final_price:.2f}"

    if cart.quantity % 1 == 0:
        quantity_txt = f"{cart.quantity:.0f}"
    else:
        quantity_txt = f"{cart.quantity:.2f}"

    residual = ''
    if cart.product.unit == '–º' and cart.product.quantity <= 0.1 and cart.quantity <= 1.2:
        residual = '<i>–£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Ä–µ–∑ –≤ –∫–æ—Ä–∑–∏–Ω–µ</i>\n'

    caption = f"<b>{cart.product.name}</b>\n{residual}\
{final_price_txt}‚ÇΩ x {quantity_txt}{cart.product.unit} = {cart_price_txt}‚ÇΩ\n\n\
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ {total_price_txt}‚ÇΩ\n\n"
    
    return caption
